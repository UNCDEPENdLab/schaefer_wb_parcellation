
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #read in masks
> library(oro.nifti)
oro.nifti 0.11.0
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:oro.nifti’:

    slice

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> #harvard-oxford atlases in FSL MNI space, thresholded and binarized at 50% probability (matches Dombrovski 2020 paper)
> l_hippo <- readNIfTI("high_res_originals/harvardoxford-subcortical_prob_Left_Hippocampus_thr50.nii.gz", reorient=FALSE)
> r_hippo <- readNIfTI("high_res_originals/harvardoxford-subcortical_prob_Right_Hippocampus_thr50.nii.gz", reorient=FALSE)
> 
> #verified coordinate lookup against fsleyes
> #note that the matrix position here is 1-based, but fsleyes is 0-based (i.e., fsleyes is one less)
> 
> lookup_coordinates <- function(map, index_value=1) {
+   vox_mat <- which(map==1, arr.ind=TRUE)
+   vox_mat <- cbind(vox_mat, t(apply(vox_mat, 1, function(r) { translateCoordinate(i=r, nim=map, verbose=FALSE) })))
+   vox_mat <- as.data.frame(vox_mat) %>% setNames(c("i", "j", "k", "LR", "AP", "SI"))
+ 
+   #look for most A + I voxel and most P + S voxel as anchors for axis
+   #use summed quantiles to weight
+   #1 - percent_rank(AP) is the most *anterior*
+ 
+   vox_mat <- vox_mat %>% mutate(pct_p = percent_rank(AP), pct_i = percent_rank(SI),
+     pct_a = 1 - pct_p, pct_s = 1 - pct_i,
+     sum_pct_ai=pct_a + pct_i, sum_pct_ps=pct_p + pct_s)
+ 
+   return(vox_mat)
+ }
> 
> #theta is radians CCW
> transform_mat <- function(vox_mat, theta=0, fuzz=1e-5) {
+   # rotate AP axis 42.51 degrees CW to reach HPC heading
+   # remember: x is AP, y is SI
+   # add small fuzz factor so that most posterior voxels are not removed by a > 0 mask operation
+   vox_mat <- vox_mat %>% mutate(rot_AP = AP*cos(theta) + SI*sin(theta), rot_SI= -AP*sin(theta) + SI*cos(theta),
+     long_axis=percent_rank(rot_AP) + !!fuzz)
+ 
+   return(vox_mat)
+ }
> 
> write_long_axis <- function(map, vox_mat, out_name) {
+   #write out hippocampal long axis map
+   longaxis_map <- map
+   longaxis_map[as.matrix(vox_mat[,c("i", "j", "k")])] <- vox_mat$long_axis
+   longaxis_map@cal_min <- min(longaxis_map)
+   longaxis_map@cal_min <- max(longaxis_map)
+   datatype(longaxis_map) <- 16 #convert to float data type (not byte)
+   longaxis_map@bitpix <- 32
+ 
+   writeNIfTI(longaxis_map, out_name)
+ }
> 
> 
> l_vox <- lookup_coordinates(l_hippo)
> r_vox <- lookup_coordinates(r_hippo)
> 
> #spot check
> r_vox %>% arrange(sum_pct_ai) %>% head(n=5)
   i   j  k LR AP  SI     pct_p      pct_i       pct_a     pct_s  sum_pct_ai sum_pct_ps
1 65 122 45 26 -5 -28 0.9925743 0.00000000 0.007425743 1.0000000 0.007425743   1.992574
2 66 122 45 25 -5 -28 0.9925743 0.00000000 0.007425743 1.0000000 0.007425743   1.992574
3 67 122 45 24 -5 -28 0.9925743 0.00000000 0.007425743 1.0000000 0.007425743   1.992574
4 63 122 46 28 -5 -27 0.9925743 0.00630063 0.007425743 0.9936994 0.013726373   1.986274
5 64 122 46 27 -5 -27 0.9925743 0.00630063 0.007425743 0.9936994 0.013726373   1.986274
> r_vox %>% arrange(sum_pct_ps) %>% head(n=5)
   i  j  k LR  AP SI       pct_p     pct_i     pct_a       pct_s sum_pct_ai sum_pct_ps
1 67 88 78 24 -39  5 0.003375338 0.9961746 0.9966247 0.003825383   1.992799 0.00720072
2 68 88 78 23 -39  5 0.003375338 0.9961746 0.9966247 0.003825383   1.992799 0.00720072
3 69 88 78 22 -39  5 0.003375338 0.9961746 0.9966247 0.003825383   1.992799 0.00720072
4 70 88 78 21 -39  5 0.003375338 0.9961746 0.9966247 0.003825383   1.992799 0.00720072
5 71 88 78 20 -39  5 0.003375338 0.9961746 0.9966247 0.003825383   1.992799 0.00720072
> 
> #find the extremes on the 1mm R mask
> #top_r <- r_vox %>% arrange(sum_pct_ps) %>% head(n=1) %>% select(LR, AP, SI) %>% as.vector()
> 
> #slightly new approach -- center of top 10 voxels
> top_r <- r_vox %>% arrange(sum_pct_ps) %>% head(n=10) %>% select(LR, AP, SI) %>% summarize_all(mean) %>% as.vector()
> 
> #bottom_r <- r_vox %>% arrange(sum_pct_ai) %>% head(n=1) %>% select(LR, AP, SI) %>% as.vector()
> bottom_r <- r_vox %>% arrange(sum_pct_ai) %>% head(n=10) %>% select(LR, AP, SI) %>% summarize_all(mean) %>% as.vector()
> 
> #NB. I'm computing this with a sagittal view in mind. So the X axis of the equation is A-P; Y axis is S-I.
> slope_r <- (top_r$SI - bottom_r$SI)/(top_r$AP - bottom_r$AP)
> 
> # To get intercept, fill in one of the points to solve for b
> # SI = slope * AP
> # 5 = slope * -40    ==>
> intercept_r <- top_r$SI - slope_r * top_r$AP
> 
> #find the extremes on the 1mm L mask
> #top_l <- l_vox %>% arrange(sum_pct_ps) %>% head(n=1) %>% select(LR, AP, SI) %>% as.vector()
> top_l <- l_vox %>% arrange(sum_pct_ps) %>% head(n=10) %>% select(LR, AP, SI) %>% summarize_all(mean) %>% as.vector()
> 
> #bottom_l <- l_vox %>% arrange(sum_pct_ai) %>% head(n=1) %>% select(LR, AP, SI) %>% as.vector()
> bottom_l <- l_vox %>% arrange(sum_pct_ai) %>% head(n=10) %>% select(LR, AP, SI) %>% summarize_all(mean) %>% as.vector()
> 
> #NB. I'm computing this with a sagittal view in mind. So the X axis of the equation is A-P; Y axis is S-I.
> slope_l <- (top_l$SI - bottom_l$SI)/(top_l$AP - bottom_l$AP)
> 
> # To get intercept, fill in one of the points to solve for b
> # SI = slope * AP
> # 5 = slope * -40    ==>
> intercept_l <- top_l$SI - slope_l * top_l$AP
> 
> #handy: http://www.webmath.com/equline1.html
> 
> #To compute 'long axisness', rotate A-P axis onto heading defined be the AI -> PS HPC vector
> #Coordinate system rotation is given by:
> # x' = x cos \theta + y sin \theta
> # y' = -x sin \theta + y cos \theta
> #
> # Thus, we need to compute the rotation angle between the current A-P axis and the hippocampus vector
> # Then, we rotate MNI coordinates onto this space (in 2-D, leaving X-Y alone), and use percentile_rank on the
> # new "A-P" heading as long axisness'.
> #
> # NB. The equations above specify theta in radians, not degrees!
> #
> # NB. The equations above specify theta as a CCW angle. Here, we have a CW angle, need 2*pi - theta conversion
> 
> # Here is the y = mx + b for the A - P axis itself
> # Flat line with slope of zero, intersecting i-s at zero
> # AP = 0*SI + 0 #intersects SI at zero
> 
> #get to y = mx + b equation for HPC line
> 
> #equation for line along HPC axis
> #PA = -11/12 * SI + -95/3
> 
> # And the angle between these lines is given by the difference in the arctans of their slopes
> theta_r <- (atan(0) - atan(slope_r)) # Yields radians clockwise
> cat("The right hippocampus is", theta_r * 180/pi, "degrees CW from the MNI AP axis\n")
The right hippocampus is 43.25902 degrees CW from the MNI AP axis
> 
> theta_l <- (atan(0) - atan(slope_l)) # Yields radians clockwise
> cat("The left hippocampus is", theta_l * 180/pi, "degrees CW from the MNI AP axis\n")
The left hippocampus is 41.43425 degrees CW from the MNI AP axis
> 
> cat("We will take the mean of the left and right rotation calculations to get the best compromise position\n")
We will take the mean of the left and right rotation calculations to get the best compromise position
> cat("The calculated mean rotation is: ", mean(c(theta_r, theta_l)) * 180/pi, "\n")
The calculated mean rotation is:  42.34664 
> 
> theta <- 2*pi - mean(c(theta_r, theta_l)) #should be CCW before coordinate transformation
> 
> #rotate AP axis 42.51 degrees CW to reach HPC heading
> #remember: x is AP, y is SI
> r_vox <- transform_mat(r_vox, theta)
> l_vox <- transform_mat(l_vox, theta)
> 
> #spot checks
> r_vox %>% arrange(long_axis) %>% select(LR,AP,SI,long_axis) %>% head(n=3)
  LR  AP SI long_axis
1 24 -39  5     1e-05
2 23 -39  5     1e-05
3 22 -39  5     1e-05
> r_vox %>% arrange(long_axis) %>% select(LR,AP,SI,long_axis) %>% tail(n=3)
     LR AP  SI long_axis
4443 26 -5 -28   0.99956
4444 25 -5 -28   0.99956
4445 24 -5 -28   0.99956
> r_vox %>% arrange(long_axis) %>% select(LR,AP,SI,long_axis) %>% filter(long_axis > .495 & long_axis < .505)
   LR  AP  SI long_axis
1  34 -21 -19 0.4966347
2  33 -21 -19 0.4966347
3  32 -21 -19 0.4966347
4  31 -21 -19 0.4966347
5  30 -21 -19 0.4966347
6  29 -21 -19 0.4966347
7  28 -21 -19 0.4966347
8  27 -21 -19 0.4966347
9  26 -21 -19 0.4966347
10 25 -21 -19 0.4966347
11 24 -21 -19 0.4966347
12 36 -20 -18 0.4991099
13 35 -20 -18 0.4991099
14 34 -20 -18 0.4991099
15 33 -20 -18 0.4991099
16 32 -20 -18 0.4991099
17 31 -20 -18 0.4991099
18 30 -20 -18 0.4991099
19 29 -20 -18 0.4991099
20 28 -20 -18 0.4991099
21 27 -20 -18 0.4991099
22 26 -20 -18 0.4991099
23 25 -20 -18 0.4991099
24 24 -20 -18 0.4991099
25 23 -20 -18 0.4991099
26 22 -20 -18 0.4991099
27 21 -20 -18 0.4991099
28 37 -19 -17 0.5027103
29 36 -19 -17 0.5027103
30 35 -19 -17 0.5027103
31 34 -19 -17 0.5027103
32 33 -19 -17 0.5027103
33 32 -19 -17 0.5027103
34 31 -19 -17 0.5027103
35 30 -19 -17 0.5027103
36 29 -19 -17 0.5027103
37 28 -19 -17 0.5027103
38 27 -19 -17 0.5027103
39 26 -19 -17 0.5027103
40 25 -19 -17 0.5027103
41 24 -19 -17 0.5027103
42 23 -19 -17 0.5027103
43 22 -19 -17 0.5027103
44 21 -19 -17 0.5027103
45 20 -19 -17 0.5027103
46 19 -19 -17 0.5027103
> #r_vox %>% arrange(long_axis) %>% select(LR,AP,SI,long_axis) %>% filter(long_axis > .3 & long_axis < .31)
> #r_vox %>% arrange(long_axis) %>% select(LR,AP,SI,long_axis) %>% filter(long_axis > .9 & long_axis < .91)
> 
> ## write_long_axis(r_hippo, r_vox, "long_axis_r_cobra_1mm")
> ## write_long_axis(l_hippo, l_vox, "long_axis_l_cobra_1mm")
> 
> write_long_axis(r_hippo, r_vox, "high_res_originals/long_axis_r_1.0mm")
[1] "high_res_originals/long_axis_r_1.0mm.nii.gz"
> write_long_axis(l_hippo, l_vox, "high_res_originals/long_axis_l_1.0mm")
[1] "high_res_originals/long_axis_l_1.0mm.nii.gz"
> 
> ##TESTING AND VALIDATION
> ##whole image test to verify angle of rotation
> ## r_vox <- which(r_hippo_downsamp != 20, arr.ind=TRUE) #silly way to get all voxels
> 
> ## r_vox <- cbind(r_vox, t(apply(r_vox, 1, function(r) { translateCoordinate(i=r, nim=r_hippo_downsamp, verbose=FALSE) })))
> ## r_vox <- as.data.frame(r_vox) %>% setNames(c("i", "j", "k", "LR", "AP", "SI"))
> 
> ## #theta <- 45 * pi/180 #45 degrees CCW in radians for testing
> ## r_vox <- r_vox %>% mutate(rot_AP = AP*cos(theta) + SI*sin(theta), rot_SI= -AP*sin(theta) + SI*cos(theta),
> ##   long_axis=percent_rank(rot_AP))
> 
> ## r_test <- r_hippo_downsamp
> ## r_test[as.matrix(r_vox[,c("i", "j", "k")])] <- r_vox$long_axis
> ## r_test@cal_min <- min(r_test)
> ## r_test@cal_min <- max(r_test)
> ## datatype(r_test) <- 16
> ## r_test@bitpix <- 32
> ## writeNIfTI(r_test, "long_axis_r_test_downsamp")
> 
> proc.time()
   user  system elapsed 
  7.582   0.563   8.336 
